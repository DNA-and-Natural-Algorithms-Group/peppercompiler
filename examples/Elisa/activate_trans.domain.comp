declare component activate_trans(act, toe, spacer, out): in -> out

## Sequences
# promoter region
sequence pro1 = TAATA
sequence pro2 = CGACTCACTATA
sequence pro3 = GGGAGA

sequence spacer1 = <spacer>N
sequence spacer2 = <spacer>N

sequence act = <act>N
sequence act_toe = <toe>N
sequence inh_toe = <toe>N

sequence in = act act_toe inh_toe*

sequence out = <out>N

sequence end1 = 5N
sequence end2 = 3N
sequence end3 = 5N
sequence end4 = 3N
sequence end = end1 end2 end3 end4

## Strands
strand [dummy] Trans_in = act act_toe inh_toe* # = in
strand Trans_out = pro3 spacer1 out spacer2 end1 end2 end3 end4

strand Act = pro1* act act_toe
strand Inh = inh_toe act_toe* act*
# Strands of the template
strand T1 = act* pro1 pro2 pro3 spacer1 out spacer2 end
strand T2 = end* spacer2* out* spacer1* pro3* pro2*

## Structures
structure Transcript_In = Trans_in : ...

structure Activator = Act : ...
structure Inhibitor = Inh : ...
structure Bound_Activator = Inh + Act : .((+.))
structure Bound_Inhibitor = Trans_in + Inh : (((+)))

structure Template_Off = T1 + T2 : ..((((((+))))))
structure Template_On  = T1 + T2 + Act : ((((((((+))))))+)).

structure Transcript_Out = Trans_out : ....(.).

## Kinetics
kinetic Activator + Template_Off -> Template_On
kinetic Inhibitor + Template_On  -> Bound_Activator + Template_Off
kinetic Transcript_In + Bound_Activator -> Activator + Bound_Inibitor
# transcription: Template_On -> Transcript_Out + Template_On
